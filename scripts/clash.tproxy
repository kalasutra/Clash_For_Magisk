#!/system/bin/sh

scripts=`realpath $0`
scripts_dir=`dirname ${scripts}`
. /data/clash/clash.config

create_rule_rules() {
    ip rule add fwmark ${mark_id} table ${table_id} pref ${pref_id}
    ip route add local default dev lo table ${table_id}
}

flush_rule_rules() {
    ip rule del fwmark ${mark_id} table ${table_id}
    ip route flush table ${table_id}
}

create_mangle_prerouting_chain() {
    ${iptables_wait} -t mangle -N CLASH_PRE

    ${iptables_wait} -t mangle -A CLASH_PRE -p tcp -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
    ${iptables_wait} -t mangle -A CLASH_PRE -p udp ! --dport 53 -j TPROXY --on-port ${Clash_tproxy_port} --tproxy-mark ${mark_id}
}

create_mangle_output_chain() {
    ${iptables_wait} -t mangle -N CLASH_OUT

    ${iptables_wait} -t mangle -A CLASH_OUT -m owner --gid-owner $(bypass_id) -j RETURN
}

create_mangle_prerouting_filter() {
    ${iptables_wait} -t mangle -N FILTER_PRE_CLASH

    for subnet in ${reserved_ip[*]} ; do
        ${iptables_wait} -t mangle -A FILTER_PRE_CLASH -d ${subnet} -j ACCEPT
    done

    ${iptables_wait} -t mangle -A FILTER_PRE_CLASH -j CLASH_PRE
}

create_mangle_output_filter() {
    ${scripts_dir}/clash.tool -f

    ${iptables_wait} -t mangle -N FILTER_OUT_CLASH

    for subnet in ${reserved_ip[*]} ; do
        ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -d ${subnet} -j ACCEPT
    done

    if [ "${mode}" = "blacklist" ] ; then
        for appuid in `cat ${appuid_file} | sort -u` ; do
            ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -m owner --uid-owner ${appuid} -j ACCEPT
        done

        ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -m owner ! --gid-owner ${Clash_group} -j CLASH_OUT
    elif [ "${mode}" = "whitelist" ] ; then
        for appuid in `cat ${appuid_file} | sort -u` ; do
            ${iptables_wait} -t mangle -A FILTER_OUT_CLASH -m owner --uid-owner ${appuid} -j CLASH_OUT
        done
    fi
}

create_nat_prerouting_dns() {
    ${iptables_wait} -t nat -N DNS_PRE

    ${iptables_wait} -t nat -A DNS_PRE -p udp -j REDIRECT --to-ports ${Clash_dns_port}
}

create_nat_output_dns() {
    ${iptables_wait} -t nat -N DNS_OUT

    ${iptables_wait} -t nat -A DNS_OUT -p udp -j REDIRECT --to-ports ${Clash_dns_port}
}

create_nat_output_filter() {
    ${iptables_wait} -t nat -N FILTER_OUT_DNS

    ${iptables_wait} -t nat -A FILTER_OUT_DNS -m owner --gid-owner ${Clash_group} -j ACCEPT
    ${iptables_wait} -t nat -A FILTER_OUT_DNS -p udp --dport 53 -j DNS_OUT
}

create_nat_prerouting_filter() {
    ${iptables_wait} -t nat -N FILTER_PRE_DNS

    ${iptables_wait} -t nat -A FILTER_PRE_DNS -p udp --dport 53 -j DNS_PRE
}

creat_pre_divert() {
    ${iptables_wait} -t mangle -N DIVERT

    ${iptables_wait} -t mangle -A DIVERT -j MARK --set-mark ${mark_id}

    ${iptables_wait} -t mangle -A DIVERT -j ACCEPT
}

apply_rules() {
    create_mangle_prerouting_chain
    create_mangle_prerouting_filter

    create_mangle_output_chain
    create_mangle_output_filter
    
    create_nat_prerouting_dns
    create_nat_prerouting_filter

    create_nat_output_dns
    create_nat_output_filter

    creat_pre_divert
    ${iptables_wait} -t mangle -A PREROUTING -p tcp -m socket -j DIVERT

    ${iptables_wait} -t mangle -N FILTER_LOCAL_IP
    ${iptables_wait} -t mangle -A PREROUTING -j FILTER_LOCAL_IP
    ${iptables_wait} -t mangle -A OUTPUT -j FILTER_LOCAL_IP

    ${iptables_wait} -t mangle -A PREROUTING -j FILTER_PRE_CLASH
    ${iptables_wait} -t mangle -A OUTPUT -j FILTER_OUT_CLASH

    ${iptables_wait} -t nat -A PREROUTING -j FILTER_PRE_DNS
    ${iptables_wait} -t nat -A OUTPUT -j FILTER_OUT_DNS

    ${scripts_dir}/clash.tool -m

    if [ "${ipv6_iptables}" = "true" ] ; then
        ip6tables -w 100 -t filter -A OUTPUT -p udp --dport 53 -m owner ! --gid-owner ${Clash_group} -j REJECT && echo "info: 本机ipv6 dns已禁用." >> ${CFM_logs_file}
        ip6tables -w 100 -t filter -A PREROUTING -p udp --dport 53 -j REJECT && echo "info: 热点ipv6 dns已禁用." >> ${CFM_logs_file}
    fi

    echo "info: iptables规则已应用." >> ${CFM_logs_file}
}

flush_rules() {
    if [ "${ipv6_iptables}" = "true" ] ; then
        ip6tables -w 100 -t filter -D OUTPUT -p udp --dport 53 -m owner ! --gid-owner ${Clash_group} -j REJECT && echo "info: 本机ipv6 dns不再禁用." >> ${CFM_logs_file}
        ip6tables -w 100 -t filter -D PREROUTING -p udp --dport 53 -j REJECT && echo "info: 热点ipv6 dns不再禁用." >> ${CFM_logs_file}
    fi

    ${iptables_wait} -t nat -D OUTPUT -j FILTER_OUT_DNS
    ${iptables_wait} -t nat -D PREROUTING -j FILTER_PRE_DNS

    ${iptables_wait} -t mangle -D OUTPUT -j FILTER_OUT_CLASH
    ${iptables_wait} -t mangle -D PREROUTING -j FILTER_PRE_CLASH

    ${iptables_wait} -t mangle -D OUTPUT -j FILTER_LOCAL_IP
    ${iptables_wait} -t mangle -D PREROUTING -j FILTER_LOCAL_IP
    ${iptables_wait} -t mangle -F FILTER_LOCAL_IP
    ${iptables_wait} -t mangle -X FILTER_LOCAL_IP

    ${iptables_wait} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT
    ${iptables_wait} -t mangle -F DIVERT
    ${iptables_wait} -t mangle -X DIVERT

    ${iptables_wait} -t nat -F FILTER_OUT_DNS
    ${iptables_wait} -t nat -X FILTER_OUT_DNS
    ${iptables_wait} -t nat -F DNS_OUT
    ${iptables_wait} -t nat -X DNS_OUT

    ${iptables_wait} -t nat -F FILTER_PRE_DNS
    ${iptables_wait} -t nat -X FILTER_PRE_DNS
    ${iptables_wait} -t nat -F DNS_PRE
    ${iptables_wait} -t nat -X DNS_PRE

    ${iptables_wait} -t mangle -F FILTER_OUT_CLASH
    ${iptables_wait} -t mangle -X FILTER_OUT_CLASH
    ${iptables_wait} -t mangle -F CLASH_OUT
    ${iptables_wait} -t mangle -X CLASH_OUT

    ${iptables_wait} -t mangle -F FILTER_PRE_CLASH
    ${iptables_wait} -t mangle -X FILTER_PRE_CLASH
    ${iptables_wait} -t mangle -F CLASH_PRE
    ${iptables_wait} -t mangle -X CLASH_PRE
    
    echo "info: iptables规则已清空." >> ${CFM_logs_file}
}

while getopts ":sk" signal ; do
    case ${signal} in
        s)
            if [ "${mode}" = "blacklist" ] || [ "${mode}" = "whitelist" ] ; then
                create_rule_rules && apply_rules
            else
                exit 0
            fi
            ;;
        k)
            if [ "${mode}" = "blacklist" ] || [ "${mode}" = "whitelist" ] ; then
                flush_rule_rules && flush_rules
            else
                exit 0
            fi
            ;;
        ?)
            echo ""
            ;;
    esac
done
